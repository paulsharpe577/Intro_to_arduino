/*
  This code is specifically designed for an Arduino Uno R4 board. It utilizes the 
  ArduinoBLE library to establish a Bluetooth® Low Energy (BLE) service, enabling 
  a central device to control the onboard LED. When the central device connects to 
  the Arduino and writes a value to a specific characteristic, it will alter the 
  state of the LED accordingly. Any non-zero value will turn on the LED, while a 
  zero value will turn it off.

Board no2

  Board: Arduino Uno R4 WiFI
*/

#include <ArduinoBLE.h>

BLEService robotService2("19B10000-E8F2-537E-4F6C-D104768A1214");  // Bluetooth® Low Energy robot Service

// Bluetooth® Low Energy LED Switch Characteristic - custom 128-bit UUID, read and writable by central
BLEByteCharacteristic switchCharacteristic("19B10001-E8F2-537E-4F6C-D104768A1214", BLERead | BLEWrite);

const int ledPin = LED_BUILTIN;  // pin to use for the LED

//Sound VARS
int Buzzer = 3;

// Motor VARS
int enA = 11;
int enB = 5;
int in1 = 10;
int in2 = 9;
int in3 = 6;
int in4 = 7;

void setup() {
  Serial.begin(9600);

  // Motor setup
  pinMode(enA, OUTPUT);
  pinMode(enB, OUTPUT);
  pinMode(in1, OUTPUT);
  pinMode(in2, OUTPUT);
  pinMode(in3, OUTPUT);
  pinMode(in4, OUTPUT);

  // Motors off to begin
  digitalWrite(in1, LOW);
  digitalWrite(in2, LOW);
  digitalWrite(in3, LOW);
  digitalWrite(in4, LOW);

  while (!Serial)
    ;

  // set LED pin to output mode
  pinMode(ledPin, OUTPUT);

  // begin initialization
  if (!BLE.begin()) {
    Serial.println("starting Bluetooth® Low Energy module failed!");

    while (1)
      ;
  }

  // set advertised local name and service UUID:
  BLE.setLocalName("robotService2");
  BLE.setAdvertisedService(robotService2);

  // add the characteristic to the service
  robotService2.addCharacteristic(switchCharacteristic);

  // add service
  BLE.addService(robotService2);

  // set the initial value for the characeristic:
  switchCharacteristic.writeValue(0);


  // start advertising
  BLE.advertise();

  Serial.println("BLE LED Peripheral");
}

void loop() {
  // listen for Bluetooth® Low Energy peripherals to connect:
  BLEDevice central = BLE.central();

  // if a central is connected to peripheral:
  if (central) {
    Serial.print("Connected to central: ");
    // print the central's MAC address:
    Serial.println(central.address());

    // while the central is still connected to peripheral:
    while (central.connected()) {
      // if the remote device wrote to the characteristic,
      // use the value to control the robot:
      if (switchCharacteristic.written()) {
        if (switchCharacteristic.value()) {  // any value other than 0
          Serial.println("LED on");
          tone(Buzzer, 300);
          delay(350);
          noTone(Buzzer);
          delay(50);
          tone(Buzzer, 600);
          delay(150);
          noTone(Buzzer);
          delay(150);
          tone(Buzzer, 600);
          delay(150);
          noTone(Buzzer);

          analogWrite(enA, 150);
          analogWrite(enB, 150);
          digitalWrite(in1, HIGH);
          digitalWrite(in2, LOW);
          digitalWrite(in3, LOW);
          digitalWrite(in4, HIGH);
          delay(1000);
          digitalWrite(in1, LOW);
          digitalWrite(in2, LOW);
          digitalWrite(in3, LOW);
          digitalWrite(in4, LOW);
          digitalWrite(ledPin, HIGH);  // will turn the LED on
        }

        else {  // a 0 value
          Serial.println(F("LED off"));
          digitalWrite(ledPin, LOW);  // will turn the LED off
          tone(Buzzer, 600);
          delay(350);
          noTone(Buzzer);
          delay(50);
          tone(Buzzer, 300);
          delay(150);
          noTone(Buzzer);
          delay(150);
          tone(Buzzer, 300);
          delay(150);
          noTone(Buzzer);

          analogWrite(enA, 150);
          analogWrite(enB, 150);
          digitalWrite(in1, LOW);
          digitalWrite(in2, HIGH);
          digitalWrite(in3, LOW);
          digitalWrite(in4, HIGH);
          delay(300);
          digitalWrite(in1, LOW);
          digitalWrite(in2, LOW);
          digitalWrite(in3, LOW);
          digitalWrite(in4, LOW);
        }
      }
    }

    // when the central disconnects, print it out:
    Serial.print(F("Disconnected from central: "));
    Serial.println(central.address());
  }
}
